@startuml

package paper <<Aggregate>> {

    class Paper <<Aggregate Root>> {
        id: String
        blankQuizzes: List<BlankQuiz>
        reassemble(blankQuizzes: List<BlankQuiz>)
        {static} assemble(blankQuizzes: List<BlankQuiz>): Paper
    }

    class BlankQuiz <<ValueObject>> {
        id: String
        question: String
        referenceAnswer: String
        score: Int
    }

    Paper "1" o-- "N" BlankQuiz
}

package examination <<Aggregate>> {

    class Examination <<Aggregate Root>> {
        id: String
        paper: Paper
        examMinutes: Int
        startDate: Long
        endDate: Long
        {static} create(paperId: PaperId, examMinutes: Int, startDate: Long, endDate: Long): Examination
    }

    class "Paper" as P <<Value Object>> {
        id: String
        blankQuizzes: List<BlankQuiz>
    }

    class "BlankQuiz" as Q <<Value Object>> {
        id: String
        question: String
        referenceAnswer: String
        score: Int
    }

    class PaperId <<Value Object>> {
        id: String
    }

    Examination "1" *-- "1" P
    P "1" *-- "5..20" Q
    PaperId "1" <.. "1" Examination
}

package examsheet <<Aggregate>> {

    class ExamSheet <<Aggregate Root>> {
        id: String
        studentId: String
        examinationId: ExaminationId
        answers: List<Answer>
        leftMinutes: Int
        submitAnswer(index: Int, answer: String)
        handIn()
        {static} assign(examination: Examination): AnswerSheet
    }

    class Answer <<Entity>> {
        id: String
        answer: String
        submit(answer: String)
    }

    class ExaminationId <<Value Object>> {
        id: String
    }

    ExaminationId "1" <-- "1" ExamSheet
    ExamSheet "1" *-- "5..20" Answer
}

@enduml
